/* Generated By:JavaCC: Do not edit this line. sintactico.java */
public class sintactico implements sintacticoConstants {
    public static void main(String[] args) throws ParseException
    {
        try
        {
            sintactico analizador = new sintactico(System.in);
            System.out.println("-> Inicio de an\u00e1lisis sint\u00e1ctico;");
            analizador.Program(); // Comienza la validación sintáctica del programa
            System.out.println("-> Fin de an\u00e1lisis sint\u00e1ctico;");
        }
        catch (ParseException e)
        {
            System.out.println("Error de an\u00e1lisis: " + e.getMessage());
        }
    }

// Regla principal del programa
  static final public void Program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case T_IF:
      case T_FOR:
      case T_ECHO:
      case T_VARIABLE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Statement();
    }
  }

// Declaración genérica (puede ser una asignación, condicional, etc.)
  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_VARIABLE:
      Assignment();
      break;
    case T_IF:
      Conditional();
      break;
    case T_ECHO:
      EchoStatement();
      break;
    case T_FOR:
      ForLoop();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Regla para asignaciones (ej: $x = 5 + 3;)
  static final public void Assignment() throws ParseException {
    jj_consume_token(T_VARIABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_ASIGNACION:
      jj_consume_token(T_ASIGNACION);
      break;
    case T_AIG_SUMA:
      jj_consume_token(T_AIG_SUMA);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Expression();
    jj_consume_token(T_PUNTO_COMA);
      System.out.println("Declaraci\u00f3n de asignaci\u00f3n reconocida.");
  }

// Expresiones (pueden ser operaciones aritméticas)
  static final public void Expression() throws ParseException {
    Term();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case T_SUMA:
      case T_RESTA:
      case T_MULTIPLICACION:
      case T_DIVISION:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case T_SUMA:
        jj_consume_token(T_SUMA);
        break;
      case T_RESTA:
        jj_consume_token(T_RESTA);
        break;
      case T_MULTIPLICACION:
        jj_consume_token(T_MULTIPLICACION);
        break;
      case T_DIVISION:
        jj_consume_token(T_DIVISION);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term();
    }
  }

// Términos ( num, var, cadenas, num negggativoss )
  static final public void Term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_RESTA:
      jj_consume_token(T_RESTA);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_NUMERO:
      jj_consume_token(T_NUMERO);
      break;
    case T_VARIABLE:
      jj_consume_token(T_VARIABLE);
      break;
    case T_TEXTO:
      jj_consume_token(T_TEXTO);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Condicionales (ej: if (condicion) { ... } else { ... })
  static final public void Conditional() throws ParseException {
    jj_consume_token(T_IF);
    jj_consume_token(T_PARIZQ);
    Condition();
    jj_consume_token(T_PARDER);
    jj_consume_token(T_LLAVE_IZQ);
    Program();
    jj_consume_token(T_LLAVE_DER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_ELSE:
      jj_consume_token(T_ELSE);
      jj_consume_token(T_LLAVE_IZQ);
      Program();
      jj_consume_token(T_LLAVE_DER);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
      System.out.println("Estructura condicional reconocida.");
  }

// Condiciones simples (ej: $x > 5)
  static final public void Condition() throws ParseException {
    Term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_IGUAL:
      jj_consume_token(T_IGUAL);
      break;
    case T_DIFERENTE:
      jj_consume_token(T_DIFERENTE);
      break;
    case T_MAYOR_QUE:
      jj_consume_token(T_MAYOR_QUE);
      break;
    case T_MENOR_QUE:
      jj_consume_token(T_MENOR_QUE);
      break;
    case T_MAYOR_O_IGUAL:
      jj_consume_token(T_MAYOR_O_IGUAL);
      break;
    case T_MENOR_O_IGUAL:
      jj_consume_token(T_MENOR_O_IGUAL);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Term();
  }

// Declaración de impresión (ej: echo "Hola";)
  static final public void EchoStatement() throws ParseException {
    jj_consume_token(T_ECHO);
    Expression();
    jj_consume_token(T_PUNTO_COMA);
      System.out.println("Declaraci\u00f3n de echo reconocida.");
  }

//FORR
// Regla para inicialización del for
  static final public void ForInit() throws ParseException {
    AssignmentNoSemicolon();
  }

// Regla para asignaciones sin punto y coma
  static final public void AssignmentNoSemicolon() throws ParseException {
    jj_consume_token(T_VARIABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_ASIGNACION:
      jj_consume_token(T_ASIGNACION);
      break;
    case T_AIG_SUMA:
      jj_consume_token(T_AIG_SUMA);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Expression();
      System.out.println("Inicializaci\u00f3n de for reconocida.");
  }

  static final public void ForLoop() throws ParseException {
    jj_consume_token(T_FOR);
    jj_consume_token(T_PARIZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_VARIABLE:
      ForInit();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(T_PUNTO_COMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_RESTA:
    case T_NUMERO:
    case T_VARIABLE:
    case T_TEXTO:
      Condition();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(T_PUNTO_COMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_VARIABLE:
      AssignmentNoSemicolon();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(T_PARDER);
    jj_consume_token(T_LLAVE_IZQ);
    Program();
    jj_consume_token(T_LLAVE_DER);
      System.out.println("Estructura de ciclo for reconocida.");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public sintacticoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000920,0x40000920,0x3000,0x3c000,0x3c000,0x8000,0xe0000000,0x40,0xfc0000,0x3000,0x40000000,0xe0008000,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public sintactico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public sintactico(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new sintacticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public sintactico(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new sintacticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public sintactico(sintacticoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(sintacticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
